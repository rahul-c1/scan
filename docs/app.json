[{"name":"app.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(DT)\n\n# Sample data structure (replace with your actual data loading)\n# Assuming your data has columns: scan_date, scan_symbol, symbol\n# create_sample_data <- function() {\n#   # This function creates sample data - replace with your actual data loading\n#   dates <- seq(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"week\")\n#   scan_types <- c(\"CarusoInsights\", \"roc_mdt25\")\n#   symbols_pool <- c(\"AGX\", \"AMSC\", \"CAMT\", \"CENX\", \"CS\", \"HNRG\", \"EL\", \"ATRO\", \"CYBN\", \"PRAX\")\n#   \n#   sample_data <- data.table(\n#     scan_date = sample(dates, 1000, replace = TRUE),\n#     scan_symbol = sample(scan_types, 1000, replace = TRUE),\n#     symbol = sample(symbols_pool, 1000, replace = TRUE)\n#   )\n#   \n#   return(sample_data)\n# }\n\ncreate_sample_data <- function() {\nsample_data <- fread(\"https://raw.githubusercontent.com/rahul-c1/scan/refs/heads/main/weekly_2025_07_27.csv\")\nsetnames(sample_data,\"scan\",\"scan_symbol\")\nsetnames(sample_data,\"date\",\"scan_date\")\n}\n# UI\nui <- navbarPage(\n  title = \"Trading Scan Analysis Dashboard\",\n  theme = \"bootstrap.min.css\",\n  \n  # Tab 1: Scan Frequency Analyzer\n  tabPanel(\"Scan Frequency\",\n           fluidRow(\n             column(4,\n                    wellPanel(\n                      h4(\"Filters\"),\n                      dateRangeInput(\"freq_date_range\", \"Date Range:\",\n                                     start = Sys.Date() - 90,\n                                     end = Sys.Date()),\n                      selectInput(\"freq_scan_type\", \"Scan Type:\",\n                                  choices = NULL,\n                                  multiple = TRUE),\n                      numericInput(\"freq_min_appearances\", \"Min Appearances:\",\n                                   value = 1, min = 1),\n                      actionButton(\"freq_update\", \"Update Analysis\", class = \"btn-primary\")\n                    )\n             ),\n             column(8,\n                    plotOutput(\"freq_plot\"),\n                    DT::dataTableOutput(\"freq_table\")\n             )\n           )\n  ),\n  \n  # Tab 2: Scan Pattern Dashboard\n  tabPanel(\"Scan Patterns\",\n           fluidRow(\n             column(3,\n                    wellPanel(\n                      h4(\"Pattern Analysis\"),\n                      dateRangeInput(\"pattern_date_range\", \"Date Range:\",\n                                     start = Sys.Date() - 180,\n                                     end = Sys.Date()),\n                      selectInput(\"pattern_view\", \"View Type:\",\n                                  choices = list(\"Heatmap\" = \"heatmap\",\n                                                 \"Time Series\" = \"timeseries\",\n                                                 \"Weekly Breakdown\" = \"weekly\")),\n                      actionButton(\"pattern_update\", \"Update\", class = \"btn-primary\")\n                    )\n             ),\n             column(9,\n                    plotOutput(\"pattern_plot\", height = \"500px\"),\n                    DT::dataTableOutput(\"pattern_summary\")\n             )\n           )\n  ),\n  \n  # Tab 3: Symbol Momentum Tracker\n  tabPanel(\"Momentum Tracker\",\n           fluidRow(\n             column(4,\n                    wellPanel(\n                      h4(\"Momentum Settings\"),\n                      numericInput(\"momentum_weeks\", \"Analysis Period (weeks):\",\n                                   value = 4, min = 2, max = 12),\n                      numericInput(\"momentum_threshold\", \"Momentum Threshold:\",\n                                   value = 50, min = 0, max = 100),\n                      selectInput(\"momentum_type\", \"Momentum Type:\",\n                                  choices = list(\"Heating Up\" = \"heating\",\n                                                 \"Cooling Down\" = \"cooling\",\n                                                 \"Both\" = \"both\")),\n                      actionButton(\"momentum_update\", \"Analyze Momentum\", class = \"btn-primary\")\n                    ),\n                    wellPanel(\n                      h4(\"Hot Symbols Alert\"),\n                      verbatimTextOutput(\"hot_symbols\")\n                    )\n             ),\n             column(8,\n                    plotOutput(\"momentum_plot\"),\n                    DT::dataTableOutput(\"momentum_table\")\n             )\n           )\n  ),\n  \n  # Tab 4: Scan Correlation Matrix\n  tabPanel(\"Correlations\",\n           fluidRow(\n             column(3,\n                    wellPanel(\n                      h4(\"Correlation Analysis\"),\n                      dateRangeInput(\"corr_date_range\", \"Date Range:\",\n                                     start = Sys.Date() - 90,\n                                     end = Sys.Date()),\n                      numericInput(\"corr_min_freq\", \"Min Symbol Frequency:\",\n                                   value = 5, min = 1),\n                      actionButton(\"corr_update\", \"Calculate\", class = \"btn-primary\")\n                    )\n             ),\n             column(9,\n                    plotOutput(\"correlation_heatmap\", height = \"400px\"),\n                    h4(\"Scan Co-occurrence Analysis\"),\n                    DT::dataTableOutput(\"correlation_table\")\n             )\n           )\n  ),\n  \n  # Tab 5: Portfolio Screening\n  tabPanel(\"Portfolio Screen\",\n           fluidRow(\n             column(4,\n                    wellPanel(\n                      h4(\"Portfolio Input\"),\n                      textAreaInput(\"portfolio_symbols\", \"Enter Symbols (one per line):\",\n                                    value = \"AGX\\nAMSC\\nCAMT\", height = \"150px\"),\n                      dateRangeInput(\"portfolio_date_range\", \"Analysis Period:\",\n                                     start = Sys.Date() - 30,\n                                     end = Sys.Date()),\n                      actionButton(\"portfolio_analyze\", \"Analyze Portfolio\", class = \"btn-primary\")\n                    ),\n                    wellPanel(\n                      h4(\"Portfolio Metrics\"),\n                      verbatimTextOutput(\"portfolio_metrics\")\n                    )\n             ),\n             column(8,\n                    plotOutput(\"portfolio_plot\"),\n                    h4(\"Portfolio Scan Activity\"),\n                    DT::dataTableOutput(\"portfolio_table\")\n             )\n           )\n  ),\n  \n  # Tab 6: Signal Strength Calculator\n  tabPanel(\"Signal Strength\",\n           fluidRow(\n             column(4,\n                    wellPanel(\n                      h4(\"Signal Weights\"),\n                      p(\"Assign weights to each scan type:\"),\n                      uiOutput(\"weight_inputs\"),\n                      br(),\n                      numericInput(\"signal_min_score\", \"Min Signal Score:\",\n                                   value = 50, min = 0, max = 100),\n                      actionButton(\"signal_calculate\", \"Calculate Signals\", class = \"btn-primary\")\n                    )\n             ),\n             column(8,\n                    plotOutput(\"signal_plot\"),\n                    h4(\"Top Signal Strength Symbols\"),\n                    DT::dataTableOutput(\"signal_table\")\n             )\n           )\n  ),\n  \n  # Tab 7: Historical Performance\n  tabPanel(\"Historical Analysis\",\n           fluidRow(\n             column(4,\n                    wellPanel(\n                      h4(\"Backtest Settings\"),\n                      dateRangeInput(\"hist_date_range\", \"Analysis Period:\",\n                                     start = Sys.Date() - 180,\n                                     end = Sys.Date()),\n                      selectInput(\"hist_scan_type\", \"Focus Scan Type:\",\n                                  choices = NULL),\n                      numericInput(\"hist_lookback\", \"Lookback Days:\",\n                                   value = 7, min = 1, max = 30),\n                      actionButton(\"hist_analyze\", \"Run Analysis\", class = \"btn-primary\")\n                    )\n             ),\n             column(8,\n                    plotOutput(\"historical_plot\"),\n                    h4(\"Scan Effectiveness Metrics\"),\n                    DT::dataTableOutput(\"historical_table\")\n             )\n           )\n  ),\n  \n  # Tab 8: Alert System\n  tabPanel(\"Alert System\",\n           fluidRow(\n             column(4,\n                    wellPanel(\n                      h4(\"Alert Settings\"),\n                      selectInput(\"alert_symbols\", \"Watch Symbols:\",\n                                  choices = NULL, multiple = TRUE),\n                      selectInput(\"alert_scan_types\", \"Watch Scan Types:\",\n                                  choices = NULL, multiple = TRUE),\n                      numericInput(\"alert_frequency_threshold\", \"Frequency Threshold:\",\n                                   value = 3, min = 1),\n                      checkboxInput(\"alert_new_symbols\", \"Alert on New Symbols\", TRUE),\n                      actionButton(\"alert_setup\", \"Setup Alerts\", class = \"btn-primary\")\n                    ),\n                    wellPanel(\n                      h4(\"Active Alerts\"),\n                      verbatimTextOutput(\"active_alerts\")\n                    )\n             ),\n             column(8,\n                    h4(\"Recent Alert Activity\"),\n                    DT::dataTableOutput(\"alert_table\"),\n                    br(),\n                    plotOutput(\"alert_timeline\")\n             )\n           )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n  \n  # Load and process data\n  scan_data <- reactive({\n    # Replace this with your actual data loading\n    create_sample_data()\n  })\n  \n  # Update choice inputs based on data\n  observe({\n    data <- scan_data()\n    scan_types <- unique(data$scan_symbol)\n    symbols <- unique(data$symbol)\n    \n    updateSelectInput(session, \"freq_scan_type\", choices = scan_types)\n    updateSelectInput(session, \"hist_scan_type\", choices = scan_types)\n    updateSelectInput(session, \"alert_symbols\", choices = symbols)\n    updateSelectInput(session, \"alert_scan_types\", choices = scan_types)\n  })\n  \n  # Tab 1: Scan Frequency Analysis\n  freq_data <- eventReactive(input$freq_update, {\n    data <- scan_data()\n    \n    # Filter data\n    if (!is.null(input$freq_date_range)) {\n      data <- data[scan_date >= input$freq_date_range[1] & \n                     scan_date <= input$freq_date_range[2]]\n    }\n    \n    if (!is.null(input$freq_scan_type) && length(input$freq_scan_type) > 0) {\n      data <- data[scan_symbol %in% input$freq_scan_type]\n    }\n    \n    # Calculate frequency\n    freq_summary <- data[, .(\n      appearances = .N,\n      scan_types = length(unique(scan_symbol)),\n      first_seen = min(scan_date),\n      last_seen = max(scan_date)\n    ), by = symbol][appearances >= input$freq_min_appearances][order(-appearances)]\n    \n    return(freq_summary)\n  })\n  \n  output$freq_plot <- renderPlot({\n    data <- freq_data()\n    if (nrow(data) > 0) {\n      top_20 <- head(data, 20)\n      barplot(top_20$appearances, names.arg = top_20$symbol,\n              las = 2, main = \"Top 20 Symbols by Scan Frequency\",\n              col = \"steelblue\", ylab = \"Number of Appearances\")\n    }\n  })\n  \n  output$freq_table <- DT::renderDataTable({\n    DT::datatable(freq_data(), options = list(pageLength = 15))\n  })\n  \n  # Tab 2: Scan Pattern Analysis\n  pattern_data <- eventReactive(input$pattern_update, {\n    data <- scan_data()\n    \n    if (!is.null(input$pattern_date_range)) {\n      data <- data[scan_date >= input$pattern_date_range[1] & \n                     scan_date <= input$pattern_date_range[2]]\n    }\n    \n    # Create weekly summary\n    data[, week := format(scan_date, \"%Y-%W\")]\n    pattern_summary <- data[, .N, by = .(week, scan_symbol)]\n    \n    return(pattern_summary)\n  })\n  \n  output$pattern_plot <- renderPlot({\n    data <- pattern_data()\n    if (nrow(data) > 0) {\n      if (input$pattern_view == \"heatmap\") {\n        # Simple heatmap using base R\n        pivot_data <- dcast(data, week ~ scan_symbol, value.var = \"N\", fill = 0)\n        mat <- as.matrix(pivot_data[, -1])\n        rownames(mat) <- pivot_data$week\n        heatmap(mat, main = \"Scan Activity Heatmap\", scale = \"column\")\n      } else {\n        # Time series plot\n        weekly_totals <- data[, sum(N), by = week]\n        plot(1:nrow(weekly_totals), weekly_totals$V1, type = \"l\",\n             main = \"Weekly Scan Activity\", xlab = \"Week\", ylab = \"Total Scans\")\n      }\n    }\n  })\n  \n  output$pattern_summary <- DT::renderDataTable({\n    data <- pattern_data()\n    summary_table <- data[, .(total_scans = sum(N), avg_weekly = mean(N)), by = scan_symbol]\n    DT::datatable(summary_table, options = list(pageLength = 10))\n  })\n  \n  # Tab 3: Momentum Tracker\n  momentum_data <- eventReactive(input$momentum_update, {\n    data <- scan_data()\n    weeks_back <- input$momentum_weeks\n    \n    # Calculate recent vs historical frequency\n    recent_date <- Sys.Date() - (weeks_back * 7)\n    \n    recent_freq <- data[scan_date >= recent_date, .N, by = symbol]\n    historical_freq <- data[scan_date < recent_date, .N, by = symbol]\n    \n    momentum <- merge(recent_freq, historical_freq, by = \"symbol\", all = TRUE)\n    momentum[is.na(N.x), N.x := 0]\n    momentum[is.na(N.y), N.y := 0]\n    \n    momentum[, momentum_score := ifelse(N.y > 0, (N.x / N.y) * 100, N.x * 100)]\n    momentum[, momentum_type := ifelse(momentum_score > 100, \"Heating Up\", \"Cooling Down\")]\n    \n    setnames(momentum, c(\"N.x\", \"N.y\"), c(\"recent_freq\", \"historical_freq\"))\n    \n    return(momentum[order(-momentum_score)])\n  })\n  \n  output$momentum_plot <- renderPlot({\n    data <- momentum_data()\n    if (nrow(data) > 0) {\n      top_20 <- head(data, 20)\n      colors <- ifelse(top_20$momentum_score > 100, \"red\", \"blue\")\n      barplot(top_20$momentum_score, names.arg = top_20$symbol,\n              las = 2, main = \"Symbol Momentum Score\", col = colors,\n              ylab = \"Momentum Score (%)\")\n      abline(h = 100, lty = 2, col = \"black\")\n    }\n  })\n  \n  output$momentum_table <- DT::renderDataTable({\n    DT::datatable(momentum_data(), options = list(pageLength = 15))\n  })\n  \n  output$hot_symbols <- renderText({\n    data <- momentum_data()\n    hot <- data[momentum_score > input$momentum_threshold]\n    if (nrow(hot) > 0) {\n      paste(\"Hot Symbols:\", paste(head(hot$symbol, 10), collapse = \", \"))\n    } else {\n      \"No symbols above threshold\"\n    }\n  })\n  \n  # Tab 4: Correlation Analysis\n  corr_data <- eventReactive(input$corr_update, {\n    data <- scan_data()\n    \n    if (!is.null(input$corr_date_range)) {\n      data <- data[scan_date >= input$corr_date_range[1] & \n                     scan_date <= input$corr_date_range[2]]\n    }\n    \n    # Filter symbols with minimum frequency\n    symbol_freq <- data[, .N, by = symbol][N >= input$corr_min_freq]\n    data <- data[symbol %in% symbol_freq$symbol]\n    \n    # Create scan type co-occurrence matrix\n    symbol_scans <- data[, .(scan_types = list(unique(scan_symbol))), by = symbol]\n    \n    return(symbol_scans)\n  })\n  \n  output$correlation_heatmap <- renderPlot({\n    # Placeholder for correlation heatmap\n    plot(1:10, 1:10, main = \"Scan Type Correlation Matrix\", \n         xlab = \"Scan Type\", ylab = \"Scan Type\")\n    text(5, 5, \"Correlation analysis\\nwould be displayed here\", cex = 1.5)\n  })\n  \n  output$correlation_table <- DT::renderDataTable({\n    data.frame(\n      Scan_Type_1 = c(\"CarusoInsights\", \"roc_mdt25\"),\n      Scan_Type_2 = c(\"roc_mdt25\", \"CarusoInsights\"),\n      Correlation = c(0.75, 0.75),\n      P_Value = c(0.001, 0.001)\n    )\n  })\n  \n  # Tab 5: Portfolio Screening\n  portfolio_data <- eventReactive(input$portfolio_analyze, {\n    data <- scan_data()\n    symbols <- trimws(unlist(strsplit(input$portfolio_symbols, \"\\n\")))\n    symbols <- symbols[symbols != \"\"]\n    \n    if (!is.null(input$portfolio_date_range)) {\n      data <- data[scan_date >= input$portfolio_date_range[1] & \n                     scan_date <= input$portfolio_date_range[2]]\n    }\n    \n    portfolio_scans <- data[symbol %in% symbols]\n    return(list(data = portfolio_scans, symbols = symbols))\n  })\n  \n  output$portfolio_plot <- renderPlot({\n    port_data <- portfolio_data()$data\n    if (nrow(port_data) > 0) {\n      symbol_counts <- port_data[, .N, by = symbol]\n      barplot(symbol_counts$N, names.arg = symbol_counts$symbol,\n              main = \"Portfolio Scan Activity\", col = \"darkgreen\",\n              ylab = \"Number of Scans\")\n    }\n  })\n  \n  output$portfolio_table <- DT::renderDataTable({\n    port_data <- portfolio_data()$data\n    if (nrow(port_data) > 0) {\n      summary_table <- port_data[, .(\n        total_scans = .N,\n        scan_types = length(unique(scan_symbol)),\n        latest_scan = max(scan_date)\n      ), by = symbol]\n      DT::datatable(summary_table, options = list(pageLength = 10))\n    }\n  })\n  \n  output$portfolio_metrics <- renderText({\n    port_data <- portfolio_data()\n    symbols <- port_data$symbols\n    scans <- port_data$data\n    \n    coverage <- length(unique(scans$symbol)) / length(symbols) * 100\n    avg_scans <- nrow(scans) / length(symbols)\n    \n    paste0(\"Portfolio Coverage: \", round(coverage, 1), \"%\\n\",\n           \"Average Scans per Symbol: \", round(avg_scans, 1), \"\\n\",\n           \"Total Portfolio Scans: \", nrow(scans))\n  })\n  \n  # Tab 6: Signal Strength Calculator\n  output$weight_inputs <- renderUI({\n    data <- scan_data()\n    scan_types <- unique(data$scan_symbol)\n    \n    weight_inputs <- lapply(scan_types, function(scan_type) {\n      numericInput(paste0(\"weight_\", scan_type), \n                   paste(\"Weight for\", scan_type, \":\"),\n                   value = 1, min = 0, max = 10, step = 0.1)\n    })\n    \n    do.call(tagList, weight_inputs)\n  })\n  \n  signal_data <- eventReactive(input$signal_calculate, {\n    data <- scan_data()\n    scan_types <- unique(data$scan_symbol)\n    \n    # Get weights from inputs\n    weights <- sapply(scan_types, function(st) {\n      weight_input <- paste0(\"weight_\", st)\n      if (!is.null(input[[weight_input]])) {\n        input[[weight_input]]\n      } else {\n        1\n      }\n    })\n    \n    # Calculate weighted scores\n    symbol_scores <- data[, .(\n      weighted_score = sum(weights[scan_symbol]),\n      total_scans = .N\n    ), by = symbol][order(-weighted_score)]\n    \n    return(symbol_scores)\n  })\n  \n  output$signal_plot <- renderPlot({\n    data <- signal_data()\n    if (nrow(data) > 0) {\n      top_20 <- head(data, 20)\n      barplot(top_20$weighted_score, names.arg = top_20$symbol,\n              las = 2, main = \"Signal Strength Scores\", col = \"purple\",\n              ylab = \"Weighted Score\")\n    }\n  })\n  \n  output$signal_table <- DT::renderDataTable({\n    data <- signal_data()\n    strong_signals <- data[weighted_score >= input$signal_min_score]\n    DT::datatable(strong_signals, options = list(pageLength = 15))\n  })\n  \n  # Tab 7: Historical Analysis\n  output$historical_plot <- renderPlot({\n    plot(1:10, rnorm(10), main = \"Historical Scan Performance Analysis\",\n         xlab = \"Time\", ylab = \"Performance Metric\")\n    text(5, 0, \"Historical performance\\nanalysis would be\\ndisplayed here\", cex = 1.2)\n  })\n  \n  output$historical_table <- DT::renderDataTable({\n    data.frame(\n      Scan_Type = c(\"CarusoInsights\", \"roc_mdt25\"),\n      Success_Rate = c(\"75%\", \"68%\"),\n      Avg_Days_to_Move = c(3.2, 4.1),\n      Best_Performance = c(\"15%\", \"12%\")\n    )\n  })\n  \n  # Alert data processing\n  alert_data <- eventReactive(input$alert_setup, {\n    data <- scan_data()\n    alerts <- data.table()\n    \n    # Recent data (last 7 days for alerts)\n    recent_data <- data[scan_date >= (Sys.Date() - 7)]\n    \n    # Alert 1: Frequency threshold alerts\n    if (!is.null(input$alert_symbols) && length(input$alert_symbols) > 0) {\n      symbol_freq <- recent_data[symbol %in% input$alert_symbols, .N, by = symbol]\n      freq_alerts <- symbol_freq[N >= input$alert_frequency_threshold]\n      \n      if (nrow(freq_alerts) > 0) {\n        freq_alert_data <- data.table(\n          timestamp = Sys.time(),\n          symbol = freq_alerts$symbol,\n          alert_type = \"Frequency Threshold\",\n          details = paste(\"Appeared\", freq_alerts$N, \"times this week\"),\n          scan_count = freq_alerts$N,\n          priority = ifelse(freq_alerts$N >= input$alert_frequency_threshold * 2, \"High\", \"Medium\")\n        )\n        alerts <- rbind(alerts, freq_alert_data)\n      }\n    }\n    \n    # Alert 2: New symbols appearing in watched scan types\n    if (!is.null(input$alert_scan_types) && length(input$alert_scan_types) > 0) {\n      # Get symbols from last week vs previous weeks\n      last_week <- recent_data[scan_symbol %in% input$alert_scan_types]\n      previous_data <- data[scan_date < (Sys.Date() - 7) & scan_date >= (Sys.Date() - 30)]\n      previous_symbols <- unique(previous_data[scan_symbol %in% input$alert_scan_types]$symbol)\n      \n      new_symbols <- setdiff(unique(last_week$symbol), previous_symbols)\n      \n      if (length(new_symbols) > 0) {\n        new_symbol_alerts <- data.table(\n          timestamp = Sys.time(),\n          symbol = new_symbols,\n          alert_type = \"New Symbol\",\n          details = paste(\"First appearance in\", paste(input$alert_scan_types, collapse = \"/\")),\n          scan_count = sapply(new_symbols, function(s) sum(last_week$symbol == s)),\n          priority = \"High\"\n        )\n        alerts <- rbind(alerts, new_symbol_alerts)\n      }\n    }\n    \n    # Alert 3: Unusual activity (symbols with 3x normal frequency)\n    if (input$alert_new_symbols) {\n      # Calculate normal frequency (last 30 days average)\n      normal_period <- data[scan_date >= (Sys.Date() - 30) & scan_date < (Sys.Date() - 7)]\n      recent_period <- data[scan_date >= (Sys.Date() - 7)]\n      \n      if (nrow(normal_period) > 0 && nrow(recent_period) > 0) {\n        normal_freq <- normal_period[, .(avg_weekly = .N / 3), by = symbol]  # 3 weeks average\n        recent_freq <- recent_period[, .N, by = symbol]\n        \n        activity_comparison <- merge(recent_freq, normal_freq, by = \"symbol\", all.x = TRUE)\n        activity_comparison[is.na(avg_weekly), avg_weekly := 0.5]  # New symbols get low baseline\n        activity_comparison[, activity_ratio := N / avg_weekly]\n        \n        unusual_activity <- activity_comparison[activity_ratio >= 3 & N >= 2]\n        \n        if (nrow(unusual_activity) > 0) {\n          activity_alerts <- data.table(\n            timestamp = Sys.time(),\n            symbol = unusual_activity$symbol,\n            alert_type = \"Unusual Activity\",\n            details = paste(\"Activity\", round(unusual_activity$activity_ratio, 1), \"x normal\"),\n            scan_count = unusual_activity$N,\n            priority = ifelse(unusual_activity$activity_ratio >= 5, \"High\", \"Medium\")\n          )\n          alerts <- rbind(alerts, activity_alerts)\n        }\n      }\n    }\n    \n    # Sort alerts by priority and scan count\n    if (nrow(alerts) > 0) {\n      alerts[, priority_order := ifelse(priority == \"High\", 1, 2)]\n      alerts <- alerts[order(priority_order, -scan_count)]\n    }\n    \n    return(alerts)\n  })\n  \n  # Alert summary for recent activity\n  recent_alert_summary <- reactive({\n    data <- scan_data()\n    \n    # Last 24 hours activity\n    last_24h <- data[scan_date >= (Sys.Date() - 1)]\n    \n    # Last week activity  \n    last_week <- data[scan_date >= (Sys.Date() - 7)]\n    \n    # Create timeline data\n    timeline_data <- data[scan_date >= (Sys.Date() - 30)]\n    daily_counts <- timeline_data[, .N, by = scan_date][order(scan_date)]\n    \n    list(\n      last_24h = last_24h,\n      last_week = last_week,\n      timeline = daily_counts\n    )\n  })\n  \n  output$alert_table <- DT::renderDataTable({\n    alerts <- alert_data()\n    \n    if (nrow(alerts) > 0) {\n      display_alerts <- alerts[, .(\n        Timestamp = format(timestamp, \"%Y-%m-%d %H:%M\"),\n        Symbol = symbol,\n        Alert_Type = alert_type,\n        Details = details,\n        Scan_Count = scan_count,\n        Priority = priority\n      )]\n      \n      DT::datatable(display_alerts, \n                    options = list(pageLength = 15, order = list(list(5, 'desc'))),\n                    rownames = FALSE) %>%\n        DT::formatStyle('Priority',\n                        backgroundColor = DT::styleEqual(c('High', 'Medium'), \n                                                         c('#ffcccc', '#ffffcc')))\n    } else {\n      # Show recent activity when no alerts\n      data <- scan_data()\n      recent_activity <- data[scan_date >= (Sys.Date() - 7)][order(-scan_date)]\n      \n      if (nrow(recent_activity) > 0) {\n        recent_display <- recent_activity[, .(\n          Date = scan_date,\n          Symbol = symbol,\n          Scan_Type = scan_symbol,\n          Status = \"Recent Activity\"\n        )]\n        \n        DT::datatable(head(recent_display, 50), \n                      options = list(pageLength = 15),\n                      caption = \"Recent Scan Activity (No Active Alerts)\")\n      } else {\n        DT::datatable(data.frame(Message = \"No recent scan activity found\"))\n      }\n    }\n  })\n  \n  output$alert_timeline <- renderPlot({\n    summary_data <- recent_alert_summary()\n    timeline <- summary_data$timeline\n    \n    if (nrow(timeline) > 0) {\n      plot(timeline$scan_date, timeline$N, type = \"l\", \n           main = \"Daily Scan Activity (Last 30 Days)\",\n           xlab = \"Date\", ylab = \"Number of Scans\",\n           col = \"blue\", lwd = 2)\n      \n      # Add points for recent activity\n      points(timeline$scan_date, timeline$N, pch = 16, col = \"blue\")\n      \n      # Highlight last 7 days\n      recent_dates <- timeline[scan_date >= (Sys.Date() - 7)]\n      if (nrow(recent_dates) > 0) {\n        points(recent_dates$scan_date, recent_dates$N, pch = 16, col = \"red\", cex = 1.2)\n      }\n      \n      # Add trend line\n      if (nrow(timeline) > 1) {\n        trend_line <- lm(N ~ as.numeric(scan_date), data = timeline)\n        abline(trend_line, col = \"gray\", lty = 2)\n      }\n      \n      legend(\"topright\", legend = c(\"Daily Activity\", \"Last 7 Days\", \"Trend\"), \n             col = c(\"blue\", \"red\", \"gray\"), pch = c(16, 16, NA), lty = c(1, NA, 2))\n    } else {\n      plot(1, 1, type = \"n\", main = \"No Timeline Data Available\",\n           xlab = \"Date\", ylab = \"Activity\")\n      text(1, 1, \"No scan data found for timeline\", cex = 1.2)\n    }\n  })\n  \n  output$active_alerts <- renderText({\n    alerts <- alert_data()\n    summary_data <- recent_alert_summary()\n    \n    # Count different types of alerts\n    if (nrow(alerts) > 0) {\n      high_priority <- sum(alerts$priority == \"High\")\n      medium_priority <- sum(alerts$priority == \"Medium\")\n      \n      alert_summary <- paste0(\n        \"🚨 ACTIVE ALERTS:\\n\",\n        \"High Priority: \", high_priority, \"\\n\",\n        \"Medium Priority: \", medium_priority, \"\\n\",\n        \"Total Alerts: \", nrow(alerts), \"\\n\\n\"\n      )\n    } else {\n      alert_summary <- \"✅ No Active Alerts\\n\\n\"\n    }\n    \n    # Add recent activity summary\n    recent_summary <- paste0(\n      \"📊 RECENT ACTIVITY:\\n\",\n      \"Last 24h Scans: \", nrow(summary_data$last_24h), \"\\n\",\n      \"Last Week Scans: \", nrow(summary_data$last_week), \"\\n\",\n      \"Active Symbols: \", length(unique(summary_data$last_week$symbol)), \"\\n\",\n      \"Scan Types: \", length(unique(summary_data$last_week$scan_symbol))\n    )\n    \n    paste(alert_summary, recent_summary)\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n","type":"text"}]
